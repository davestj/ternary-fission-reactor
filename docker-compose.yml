#
# File: docker-compose.yml
# Author: bthlops (David StJ)
# Date: July 29, 2025
# Title: Docker Compose Configuration for Ternary Fission Energy Emulation Stack
# Purpose: Complete production deployment stack with monitoring and persistence
# Reason: Orchestrates all services for full-stack deployment with observability
# 
# Change Log:
# 2025-07-29: Initial creation with main application service configuration
# 2025-07-29: Added Prometheus monitoring and metrics collection
# 2025-07-29: Integrated Grafana dashboards for real-time visualization
# 2025-07-29: Added persistent volume configuration for data retention
# 2025-07-29: Configured networking and service discovery for microservices
#
# Carry-over Context:
# - This stack provides complete production deployment of the ternary fission system
# - Monitoring services enable observability and performance tracking
# - Persistent volumes ensure data retention across container restarts
# - Network configuration allows secure inter-service communication
# - Environment variables provide flexible configuration management

version: '3.8'

# =============================================================================
# SERVICES CONFIGURATION
# =============================================================================

services:
  
  # Main Ternary Fission Energy Emulation Application
  ternary-fission-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: ternary-fission-emulator
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=production
      - LOG_LEVEL=info
      - API_PORT=8080
      - SIMULATION_MODE=daemon
      - CONFIG_FILE=/app/configs/ternary_fission.conf
      - PROMETHEUS_ENABLED=true
      - METRICS_PORT=8080
      - EVENTS_PER_SECOND=5.0
      - MAX_ENERGY_FIELD_MEV=1000.0
      - AUTO_DISSIPATE_FIELDS=true
      - DEFAULT_DISSIPATION_ROUNDS=15
    volumes:
      - ./configs:/app/configs:ro
      - ternary-data:/app/data
      - ternary-results:/app/results
      - ternary-logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ternary-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Metrics Collection Service
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ternary-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=10GB"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ternary-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Visualization and Dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ternary-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=ternary_fission_2025
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/ternary-fission-overview.json
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ternary-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: ternary-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ternary-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  # Redis for Caching and Session Management (Optional)
  redis:
    image: redis:7.0-alpine
    container_name: ternary-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ternary_redis_2025
    volumes:
      - redis-data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ternary-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.05'
          memory: 128M

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: ternary-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./web/static:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ternary-network
    depends_on:
      - ternary-fission-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# =============================================================================
# VOLUMES CONFIGURATION
# =============================================================================

volumes:
  # Application data volumes
  ternary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  ternary-results:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./results

  ternary-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

  # Monitoring data volumes
  prometheus-data:
    driver: local
    name: ternary-prometheus-data
    
  grafana-data:
    driver: local
    name: ternary-grafana-data

  # Supporting service volumes
  redis-data:
    driver: local
    name: ternary-redis-data

  nginx-logs:
    driver: local
    name: ternary-nginx-logs

# =============================================================================
# NETWORKS CONFIGURATION
# =============================================================================

networks:
  ternary-network:
    driver: bridge
    name: ternary-fission-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: ternary-br0
      com.docker.network.driver.mtu: 1500

# =============================================================================
# DEVELOPMENT OVERRIDE CONFIGURATION
# =============================================================================

# We provide additional development configuration
# To use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# Development services configuration (create docker-compose.dev.yml separately)
# - Hot reload for development
# - Debug ports exposed
# - Development database seeding
# - Additional logging and profiling tools
