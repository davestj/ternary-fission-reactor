#
# File: docker-compose.yml
# Author: bthlops (David StJ)
# Date: July 31, 2025
# Title: Docker Compose Configuration for Ternary Fission Energy Emulation Stack - FIXED
# Purpose: Simplified production deployment stack with essential services and ARM64/AMD64 support
# Reason: Orchestrates main application with optional monitoring for reliable deployment
#
# Change Log:
# 2025-07-31: FIXED docker-compose structure and service definitions
#             Removed version attribute (deprecated in Compose v2+)
#             Fixed volume mounts to use proper host paths
#             Added platform-specific build targets
#             Simplified service dependencies and networking
#             Added proper ARM64/AMD64 multi-architecture support
#             Fixed environment variable assignments
#
# Carry-over Context:
# - Simplified stack focuses on core ternary fission application
# - Optional monitoring services available via profiles
# - Persistent volumes ensure data retention across container restarts
# - Network configuration allows secure inter-service communication
# - Environment variables provide flexible configuration management
# - Fixed for macOS ARM64 and multi-platform builds

# =============================================================================
# SERVICES CONFIGURATION
# =============================================================================

services:

  # Main Ternary Fission Energy Emulation Application
  ternary-fission-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: ternary-fission-emulator
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      GO_ENV: production
      LOG_LEVEL: info
      API_PORT: 8080
      SIMULATION_MODE: daemon
      CONFIG_FILE: /app/configs/ternary_fission.conf
      EVENTS_PER_SECOND: 5.0
      MAX_ENERGY_FIELD_MEV: 1000.0
      PROMETHEUS_ENABLED: true
      WEBSOCKET_ENABLED: true
      CORS_ENABLED: true
      AUTO_DISSIPATE_FIELDS: true
      DEFAULT_DISSIPATION_ROUNDS: 15
    volumes:
      - ./configs:/app/configs:ro
      - ternary-data:/app/data
      - ternary-results:/app/results
      - ternary-logs:/app/logs
    networks:
      - ternary-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for Caching
  redis:
    image: redis:7.0-alpine
    container_name: ternary-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ternary_redis_2025
    volumes:
      - redis-data:/data
    networks:
      - ternary-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    profiles:
      - full-stack

  # Optional: Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ternary-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=7d"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ternary-network
    depends_on:
      - ternary-fission-app
    profiles:
      - monitoring
      - full-stack

  # Optional: Grafana for Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ternary-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ternary_fission_2025
      GF_USERS_ALLOW_SIGN_UP: false
      GF_ANALYTICS_REPORTING_ENABLED: false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ternary-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - full-stack

# =============================================================================
# VOLUMES CONFIGURATION
# =============================================================================

volumes:
  # Application data volumes (named volumes for persistence)
  ternary-data:
    driver: local
    name: ternary-fission-data

  ternary-results:
    driver: local
    name: ternary-fission-results

  ternary-logs:
    driver: local
    name: ternary-fission-logs

  # Supporting service volumes
  redis-data:
    driver: local
    name: ternary-redis-data

  prometheus-data:
    driver: local
    name: ternary-prometheus-data

  grafana-data:
    driver: local
    name: ternary-grafana-data

# =============================================================================
# NETWORKS CONFIGURATION
# =============================================================================

networks:
  ternary-network:
    driver: bridge
    name: ternary-fission-network

# =============================================================================
# USAGE EXAMPLES AND DOCUMENTATION
# =============================================================================

# Basic usage (just the main application):
# docker-compose up -d

# With Redis caching:
# docker-compose --profile full-stack up -d

# With monitoring stack:
# docker-compose --profile monitoring up -d

# Everything enabled:
# docker-compose --profile full-stack --profile monitoring up -d

# Platform-specific builds:
# docker-compose build --platform linux/arm64
# docker-compose build --platform linux/amd64

# Check logs:
# docker-compose logs -f ternary-fission-app

# Scale down:
# docker-compose down

# Clean volumes (CAUTION - removes all data):
# docker-compose down -v

# Build specific platform:
# DOCKER_DEFAULT_PLATFORM=linux/arm64 docker-compose build