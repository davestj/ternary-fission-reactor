#
# File: docker-compose.yml
# Author: bthlops (David StJ)
# Date: July 31, 2025
# Title: Docker Compose Configuration for Ternary Fission Energy Emulation Stack - FIXED
# Purpose: Production deployment stack with fixed port configuration and admin dashboard
# Reason: Orchestrates main application with proper port mapping and embedded web interface
#
# Change Log:
# 2025-07-31: FIXED port mapping from 8080 to 8238 to avoid common conflicts
#             Updated service configuration to match new API server defaults
#             Ensured proper environment variable configuration
#             Added web dashboard access via browser interface
#             Maintained all monitoring and operational capabilities
#
# Carry-over Context:
# - We use port 8238 to avoid conflicts with common services on 8080
# - We provide embedded web dashboard accessible via browser
# - We maintain all production-grade configuration and monitoring
# - We ensure proper container orchestration with health checks
# - We support both development and production deployment scenarios

services:

  # Main Ternary Fission Energy Emulation Application with Web Dashboard
  ternary-fission-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: ternary-fission-emulator
    restart: unless-stopped
    ports:
      - "8238:8238"  # Fixed port mapping
    environment:
      GO_ENV: production
      LOG_LEVEL: info
      API_PORT: 8238  # Updated to match new default
      SIMULATION_MODE: daemon
      CONFIG_FILE: /app/configs/ternary_fission.conf
      EVENTS_PER_SECOND: 5.0
      MAX_ENERGY_FIELD_MEV: 1000.0
      PROMETHEUS_ENABLED: true
      WEBSOCKET_ENABLED: true
      CORS_ENABLED: true
      AUTO_DISSIPATE_FIELDS: true
      DEFAULT_DISSIPATION_ROUNDS: 15
    volumes:
      - ./configs:/app/configs:ro
      - ternary-data:/app/data
      - ternary-results:/app/results
      - ternary-logs:/app/logs
    networks:
      - ternary-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8238/api/v1/health"]  # Updated port
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for Caching
  redis:
    image: redis:7.0-alpine
    container_name: ternary-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ternary_redis_2025
    volumes:
      - redis-data:/data
    networks:
      - ternary-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    profiles:
      - full-stack

  # Optional: Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ternary-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=7d"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ternary-network
    depends_on:
      - ternary-fission-app
    profiles:
      - monitoring
      - full-stack

  # Optional: Grafana for Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ternary-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ternary_fission_2025
      GF_USERS_ALLOW_SIGN_UP: false
      GF_ANALYTICS_REPORTING_ENABLED: false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ternary-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - full-stack

# =============================================================================
# VOLUMES CONFIGURATION
# =============================================================================

volumes:
  # Application data volumes
  ternary-data:
    driver: local
    name: ternary-fission-data

  ternary-results:
    driver: local
    name: ternary-fission-results

  ternary-logs:
    driver: local
    name: ternary-fission-logs

  # Supporting service volumes
  redis-data:
    driver: local
    name: ternary-redis-data

  prometheus-data:
    driver: local
    name: ternary-prometheus-data

  grafana-data:
    driver: local
    name: ternary-grafana-data

# =============================================================================
# NETWORKS CONFIGURATION
# =============================================================================

networks:
  ternary-network:
    driver: bridge
    name: ternary-fission-network

# =============================================================================
# USAGE EXAMPLES AND ACCESS INFORMATION
# =============================================================================

# Basic usage (just the main application):
# docker-compose up -d
#
# Web Dashboard Access: http://localhost:8238/
# API Documentation: http://localhost:8238/api/v1
# Health Check: http://localhost:8238/api/v1/health
# System Status: http://localhost:8238/api/v1/status
# Prometheus Metrics: http://localhost:8238/api/v1/metrics
#
# With Redis caching:
# docker-compose --profile full-stack up -d
#
# With monitoring stack:
# docker-compose --profile monitoring up -d
# Grafana Dashboard: http://localhost:3000 (admin/ternary_fission_2025)
# Prometheus: http://localhost:9090
#
# Everything enabled:
# docker-compose --profile full-stack --profile monitoring up -d
#
# Check logs:
# docker-compose logs -f ternary-fission-app
#
# Scale down:
# docker-compose down