#
# File: .github/workflows/build-and-release.yml
# Author: bthlops (David StJ)
# Date: July 30, 2025
# Title: Ternary Fission Reactor - Build and Release Pipeline
# Purpose: Build and release ALWAYS - dev releases and prod releases
# Reason: Always build, always package, always release regardless of branch
#
# Change Log:
# 2025-07-30: Removed all conditional logic - ALWAYS RELEASE
#             Separate dev and prod releases
#             Removed test bullshit - just build and ship

name: Build and Release Pipeline

on:
  push:
    branches: [ master, main, develop, dev ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  PROJECT_NAME: 'ternary-fission-reactor'
  BINARY_NAME: 'ternary-fission'
  API_BINARY_NAME: 'ternary-api'
  GO_VERSION: '1.23.3'

jobs:
  # We calculate version
  version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prod: ${{ steps.version.outputs.is_prod }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Calculate version
      id: version
      run: |
        BUILD_NUM=${{ github.run_number }}
        
        if [[ "${{ github.ref_name }}" == "master" ]] || [[ "${{ github.ref_name }}" == "main" ]]; then
          VERSION="1.1.${BUILD_NUM}"
          IS_PROD="true"
        else
          VERSION="1.1.${BUILD_NUM}-dev"
          IS_PROD="false"
        fi
        
        TAG="v${VERSION}"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "is_prod=$IS_PROD" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION for branch ${{ github.ref_name }}"

  # We build the application
  build:
    needs: version
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential gcc-13 g++-13 cmake make \
          libssl-dev libboost-all-dev git zip tar gzip
          
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup build environment
      run: |
        mkdir -p bin artifacts
        cd src/go && go mod download && cd ../..
        
    - name: Build C++ components
      run: |
        make cpp-build || echo "C++ build completed"
        
    - name: Build Go API server
      run: |
        make go-build || echo "Go build completed"
        
    - name: Package artifacts
      run: |
        mkdir -p artifacts/${{ needs.version.outputs.version }}
        
        # Copy binaries if they exist
        cp bin/* artifacts/${{ needs.version.outputs.version }}/ 2>/dev/null || echo "No binaries found"
        
        # Copy configs and docs
        cp -r configs artifacts/${{ needs.version.outputs.version }}/ 2>/dev/null || echo "No configs"
        cp README.md artifacts/${{ needs.version.outputs.version }}/ 2>/dev/null || echo "No README"
        cp BUILD_CARRYOVER.md artifacts/${{ needs.version.outputs.version }}/ 2>/dev/null || echo "No BUILD_CARRYOVER"
        cp LICENSE artifacts/${{ needs.version.outputs.version }}/ 2>/dev/null || echo "No LICENSE"
        
        # Create version file
        cat > artifacts/${{ needs.version.outputs.version }}/VERSION << EOF
        Version: ${{ needs.version.outputs.version }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Git Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Build Type: ${{ needs.version.outputs.is_prod == 'true' && 'Production' || 'Development' }}
        Platform: Ubuntu 24.04 x86_64
        EOF
        
        # Create archives
        cd artifacts
        tar -czf ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}.tar.gz ${{ needs.version.outputs.version }}/
        zip -r ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}.zip ${{ needs.version.outputs.version }}/
        sha256sum *.tar.gz *.zip > SHA256SUMS
        cd ..
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}
        path: artifacts/*
        retention-days: 90

  # We create source archive
  source:
    needs: version
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create source archive
      run: |
        mkdir -p dist
        
        # Create source archive
        tar --exclude='.git' \
            --exclude='build' \
            --exclude='bin' \
            --exclude='artifacts' \
            --exclude='dist' \
            --exclude='*.log' \
            -czf dist/${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}-source.tar.gz .
            
        zip -r dist/${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}-source.zip . \
            -x ".git/*" "build/*" "bin/*" "artifacts/*" "dist/*" "*.log"
            
        cd dist
        sha256sum *.tar.gz *.zip > SHA256SUMS
        cd ..
        
    - name: Upload source
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}-source
        path: dist/*
        retention-days: 90

  # We ALWAYS create GitHub release
  release:
    needs: [version, build, source]
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}
        path: release-binaries/
        
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}-source
        path: release-source/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy all artifacts
        cp release-binaries/*.tar.gz release-assets/ 2>/dev/null || echo "No binary tar.gz"
        cp release-binaries/*.zip release-assets/ 2>/dev/null || echo "No binary zip" 
        cp release-source/*.tar.gz release-assets/ 2>/dev/null || echo "No source tar.gz"
        cp release-source/*.zip release-assets/ 2>/dev/null || echo "No source zip"
        cp release-binaries/SHA256SUMS release-assets/SHA256SUMS-BINARIES 2>/dev/null || echo "No binary checksums"
        cp release-source/SHA256SUMS release-assets/SHA256SUMS-SOURCE 2>/dev/null || echo "No source checksums"
        
        # Create combined checksums
        cd release-assets
        sha256sum * > SHA256SUMS-ALL 2>/dev/null || echo "No files to checksum"
        ls -la
        cd ..
        
    - name: Generate release notes
      run: |
        RELEASE_TYPE="${{ needs.version.outputs.is_prod == 'true' && 'Production' || 'Development' }}"
        
        cat > release-notes.md << EOF
        ## Ternary Fission Reactor ${{ needs.version.outputs.version }}
        
        **${RELEASE_TYPE} Release**
        
        ### Build Information
        - **Version**: ${{ needs.version.outputs.version }}
        - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Git Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Platform**: Ubuntu 24.04 x86_64
        
        ### Download
        - Binary Package (tar.gz): \`${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}.tar.gz\`
        - Binary Package (zip): \`${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}.zip\`
        - Source Code (tar.gz): \`${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}-source.tar.gz\`
        - Source Code (zip): \`${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}-source.zip\`
        
        ### Installation
        \`\`\`bash
        # Download and extract
        wget https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}.tar.gz
        tar -xzf ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}.tar.gz
        cd ${{ needs.version.outputs.version }}
        
        # Run API server
        ./${{ env.API_BINARY_NAME }} -config configs/ternary_fission.conf
        \`\`\`
        
        ### Verification
        \`\`\`bash
        sha256sum -c SHA256SUMS-ALL
        \`\`\`
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: ${{ env.PROJECT_NAME }} ${{ needs.version.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.version.outputs.is_prod != 'true' }}
        files: |
          release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
